import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import titanic classification
from sklearn.metrics import accuracy_score

# Load the Titanic dataset
titanic_data = pd.read_csv("titanic.csv")

# Data preprocessing
titanic_data = titanic_data.dropna()  # Remove rows with missing data
titanic_data = titanic_data.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1)

# Encode categorical variables
titanic_data = pd.get_dummies(titanic_data, columns=['Sex', 'Embarked'], drop_first=True)

# Define the features and target variable
X = titanic_data.drop('Survived', axis=1)
y = titanic_data['Survived']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train a machine learning model
model = titanic classification (n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy * 100:.2f}%")

# Now you can use the trained model to predict survival for a specific passenger
# Pass the passenger's features as a DataFrame to the model's predict method
# For example:
# new_passenger_features = pd.DataFrame({'Pclass': 3, 'Age': 25, 'SibSp': 1, 'Parch': 0, 'Fare': 7.925, 'Sex_male': 1, 'Embarked_Q': 0, 'Embarked_S': 1}, index=[0])
# prediction = model.predict(new_passenger_features)
# print("Survived" if prediction[0] == 1 else "Did not survive")
